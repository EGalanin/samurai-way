{"version":3,"file":"static/js/388.cb251357.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/componets/profile/profileInfo/profileInfo.module.css?45e3","componets/profile/profileInfo/ProfileStatus.tsx","componets/profile/profileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/componets/profile/mypost/myposts.module.css?daf0","webpack://samurai-way/./src/componets/profile/mypost/post/post.module.css?e7fe","componets/profile/mypost/post/Post.tsx","componets/profile/mypost/MyPosts.tsx","componets/profile/mypost/MyPostContainer.tsx","componets/profile/Profile.tsx","componets/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"img\":\"profileInfo_img__Dtqgw\",\"descriptionBlock\":\"profileInfo_descriptionBlock__5jksC\"};","import React, {useEffect, useRef, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void// пофиксить\r\n};\r\n\r\nexport const ProfileStatus = ({ status, updateUserStatus }: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [currentStatus, setCurrentStatus] = useState(status);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status);\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        if (editMode && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editMode]);\r\n\r\n    const handleClick = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        setEditMode(false);\r\n        updateUserStatus(currentStatus);\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(e.target.value);\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <div>\r\n                    <input\r\n                        ref={inputRef}\r\n                        value={currentStatus}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    {currentStatus ? (\r\n                        <span onClick={handleClick}>{currentStatus}</span>\r\n                    ) : (\r\n                        <span onClick={handleClick}>Нет статуса</span>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport s from './profileInfo.module.css'\r\nimport {Preloader} from '../../../../src/componets/common/Preloader';\r\nimport {RootInterface} from '../../../redax/profileReducer';\r\nimport {ProfileStatus} from '../profileInfo/ProfileStatus';\r\n\r\ntype ProfileInfoType = {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    updateUserStatus: (status: string) => any // пофиксить\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateUserStatus}: ProfileInfoType) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/*<div>*/}\r\n            {/*    <img className={s.img} src=\"https://avatars.mds.yandex.net/i?id=62e4a98bd5e230054221b797c8d04b80e78831b1-4282959-images-thumbs&n=13\"*/}\r\n            {/*         alt=\"гора\"/>*/}\r\n            {/*</div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large} alt=\"big photo\"/>\r\n                <ProfileStatus  status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"myposts_postsBlock__7Rm2g\",\"posts\":\"myposts_posts__V84SD\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"post_item__OT0dI\"};","import React from 'react';\r\nimport S from './post.module.css';\r\nimport dog from '../../../../assets/images/dog.jpg';\r\n\r\nexport type PostType = {\r\n    id: number\r\n    count: number\r\n    message: string | undefined\r\n}\r\n\r\nexport const Post = ({id, message, count}: PostType) => {\r\n    return (\r\n        <div className={S.item}>\r\n            <img src={dog} alt=\"аватар\"/>\r\n            <div>\r\n                {message}\r\n            </div>\r\n            <div>\r\n                <span>like: {count}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './myposts.module.css'\r\nimport {Post, PostType} from './post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../../componets/common/formsControls/FormsControl';\r\n\r\ntype MyPostsType = {\r\n    posts: PostType[];\r\n    addPost: (newPostText: string) => void;\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = ({posts, addPost}: MyPostsType) => {\r\n\r\n    const postsElements = posts.map(p => <Post key={p.id}\r\n                                               id={p.id}\r\n                                               message={p.message}\r\n                                               count={p.count}/>)\r\n\r\n    const addPostMessageHandler = (value: AddMessagePostValues) => {\r\n        if (value.newPostText) {\r\n            addPost(value.newPostText)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddMessagePostRedux onSubmit={addPostMessageHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type AddMessagePostValues = {\r\n    newPostText: string;\r\n};\r\n\r\nconst AddMessagePost: React.FC<InjectedFormProps<AddMessagePostValues>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostText'}\r\n                       placeholder={'Post message...'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessagePostRedux = reduxForm<AddMessagePostValues>({\r\n    form: 'profileAddPostMessageForm',\r\n})(AddMessagePost)\r\n\r\nexport default React.memo(MyPosts);","import {connect} from 'react-redux';\r\nimport MyPosts from '../mypost/MyPosts';\r\nimport {addPostAC} from '../../../redax/profileReducer';\r\nimport {RootState} from '../../../redax/redax-store';\r\nimport {PostType} from '../../../componets/profile/mypost/post/Post';\r\nimport {Dispatch} from 'redux';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage?.posts\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './profileInfo/ProfileInfo';\r\nimport {MyPostContainer} from '../../componets/profile/mypost/MyPostContainer';\r\nimport {RootInterface} from '../../redax/profileReducer';\r\n\r\ntype ProfileType = {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    updateUserStatus: (status: string) => any // пофиксить\r\n}\r\n\r\nexport const Profile: React.FC<ProfileType> = ({profile, status, updateUserStatus}) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateUserStatus={updateUserStatus}\r\n            />\r\n            <MyPostContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import * as React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {Profile} from '../../../src/componets/profile/Profile';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../../src/redax/redax-store';\r\nimport {getUserProfile, getUserStatus, RootInterface, updateUserStatus} from '../../../src/redax/profileReducer';\r\nimport {RouteComponentProps, useParams} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype RouteParams  = {\r\n    userId: string ;\r\n}\r\n\r\ntype Props = RouteComponentProps<RouteParams> & {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    isAuth: boolean\r\n    autorizedUserId: string | null\r\n    getUserProfile: (userId: string) => any  //пофиксить\r\n    getUserStatus: (userId: string) => any //пофиксить\r\n    updateUserStatus: (status: string) => any // пофиксить\r\n};\r\n\r\nconst ProfileContainer: React.FC<Props> = (props) => {\r\n\r\n    const {getUserProfile, getUserStatus, updateUserStatus, profile, status, isAuth, autorizedUserId } = props;\r\n    const { userId } = useParams<RouteParams>()\r\n\r\n    useEffect(() => {\r\n        const fetchProfile = async () => {\r\n            try {\r\n                console.log(\"Fetching profile with ID:\", userId); // Логируем id\r\n                if (!userId) {\r\n                    if (autorizedUserId) {\r\n                        getUserProfile(autorizedUserId);\r\n                    } else {\r\n                        throw new Error(\"ID авторизованного пользователя отсутствует\");\r\n                    }\r\n                    return;\r\n                }\r\n                getUserProfile(userId)\r\n                // console.log(\"Profile fetched successfully\");\r\n                getUserStatus(userId)\r\n                // console.log(\"Get Status successfully\");\r\n            } catch (error) {\r\n                // console.error(error.message); // Логируем ошибку\r\n            }\r\n        };\r\n        fetchProfile();\r\n    }, [userId, getUserProfile, getUserStatus]);\r\n\r\n\r\n    return (\r\n        <Profile profile={profile}\r\n                 status={status}\r\n                 updateUserStatus={updateUserStatus}\r\n        />\r\n    );\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    profile: RootInterface | null,\r\n    status: string\r\n    autorizedUserId: string | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n    profile: state.profilePage?.profile,\r\n    status: state.profilePage?.status,\r\n    autorizedUserId: state.auth?.userId,\r\n    isAuth: state.auth?.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n    WithAuthRedirect\r\n)(ProfileContainer)","import * as React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../src/redax/redax-store';\r\n\r\ntype MapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootState): MapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth?.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsTypeForRedirect> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) {\r\n            return <Redirect to=\"/login\"/>;\r\n        }\r\n        // Если аутентифицирован, возвращаем переданный компонент\r\n        return <Component {...restProps as T} />;\r\n    };\r\n    // Оборачиваем RedirectComponent в connect\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n"],"names":["ProfileStatus","_ref","status","updateUserStatus","editMode","setEditMode","useState","currentStatus","setCurrentStatus","inputRef","useRef","useEffect","current","focus","handleClick","_jsx","_Fragment","children","ref","value","onBlur","handleBlur","onChange","e","target","onClick","ProfileInfo","profile","_jsxs","className","s","src","photos","large","alt","Preloader","Post","id","message","count","S","dog","maxLength10","maxLengthCreator","MyPosts","posts","addPost","postsElements","map","p","AddMessagePostRedux","onSubmit","newPostText","reduxForm","form","props","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","React","MyPostContainer","connect","state","_state$profilePage","profilePage","dispatch","addPostAC","Profile","compose","_state$profilePage2","_state$auth","_state$auth2","autorizedUserId","auth","userId","isAuth","getUserProfile","getUserStatus","WithAuthRedirect","useParams","async","console","log","Error","error","fetchProfile","mapStateToPropsForRedirect","Component","restProps","Redirect","to"],"sourceRoot":""}