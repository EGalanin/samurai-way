{"version":3,"file":"static/js/893.42cada6c.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/componets/profile/mypost/myposts.module.css?daf0","webpack://samurai-way/./src/componets/profile/mypost/post/post.module.css?e7fe","componets/profile/mypost/post/Post.tsx","componets/profile/mypost/MyPosts.tsx","componets/profile/mypost/MyPostContainer.tsx","webpack://samurai-way/./src/componets/profile/profileInfo/profileInfo.module.css?45e3","componets/profile/profileInfo/ProfileDataForm.tsx","componets/profile/profileInfo/ProfileStatus.tsx","componets/profile/profileInfo/ProfileInfo.tsx","componets/profile/Profile.tsx","componets/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"myposts_postsBlock__7Rm2g\",\"posts\":\"myposts_posts__V84SD\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"post_item__OT0dI\"};","import React from 'react';\r\nimport S from './post.module.css';\r\nimport baseUserPhoto from 'src/assets/images/avatardefault_92824.svg';\r\n\r\nexport type PostType = {\r\n    id: number\r\n    count: number\r\n    message: string | undefined\r\n}\r\n\r\nexport const Post = ({id, message, count}: PostType) => {\r\n    return (\r\n        <div className={S.item}>\r\n            <img src={baseUserPhoto} alt=\"аватар\"/>\r\n            <div>\r\n                {message}\r\n            </div>\r\n            <div>\r\n                <span>like: {count}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport s from './myposts.module.css'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from 'src/utils/validators/validators';\r\nimport {Textarea} from 'src/componets/common/formsControls/FormsControl';\r\nimport {Post, PostType} from 'src/componets/profile/mypost/post/Post';\r\n\r\ntype MyPostsType = {\r\n    posts: PostType[];\r\n    addPost: (newPostText: string) => void;\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nconst MyPosts = ({posts, addPost}: MyPostsType) => {\r\n\r\n    const postsElements = posts.map(p => <Post key={p.id}\r\n                                               id={p.id}\r\n                                               message={p.message}\r\n                                               count={p.count}/>)\r\n\r\n    const addPostMessageHandler = (value: AddMessagePostValues) => {\r\n        if (value.newPostText) {\r\n            addPost(value.newPostText)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My post</h3>\r\n            <AddMessagePostRedux onSubmit={addPostMessageHandler}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport type AddMessagePostValues = {\r\n    newPostText: string;\r\n};\r\n\r\nconst AddMessagePost: React.FC<InjectedFormProps<AddMessagePostValues>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostText'}\r\n                       placeholder={'Post message...'}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessagePostRedux = reduxForm<AddMessagePostValues>({\r\n    form: 'profileAddPostMessageForm',\r\n})(AddMessagePost)\r\n\r\nexport default React.memo(MyPosts);\r\n","import {connect} from 'react-redux';\r\nimport {addPostAC} from 'src/redax/profileReducer';\r\nimport {RootState} from 'src/redax/redax-store';\r\nimport {PostType} from 'src/componets/profile/mypost/post/Post';\r\nimport {Dispatch} from 'redux';\r\nimport MyPosts from 'src/componets/profile/mypost/MyPosts';\r\n\r\ntype MapStatePropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage?.posts\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"img\":\"profileInfo_img__Dtqgw\",\"descriptionBlock\":\"profileInfo_descriptionBlock__5jksC\",\"mainPhoto\":\"profileInfo_mainPhoto__jNKfj\",\"contact\":\"profileInfo_contact__DeRrW\"};","import {RootInterface} from 'src/redax/profileReducer';\r\nimport React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from 'src/componets/common/formsControls/FormsControl';\r\nimport {required} from 'src/utils/validators/validators';\r\n\r\ntype ProfileDataFormType = {\r\n    profile: RootInterface | null;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormType, {}, string>> = ({handleSubmit}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button >Save</button></div>\r\n            <div><b>Full name: </b><Field type={'text'}\r\n                                          name={'fullName'}\r\n                                          placeholder={'Полное имя'}\r\n                                          component={Input}\r\n                                          validate={[required]}\r\n            /></div>\r\n\r\n            <div><b>Looking for a job:</b> <Field type={'checkbox'}\r\n                                                  name={'lookingForAJob'}\r\n                                                  component={Input}\r\n            /></div>\r\n\r\n            <div><b>My professional skills: </b><Field type={'text'}\r\n                                                       name={'skills'}\r\n                                                       placeholder={'ваши скилы'}\r\n                                                       component={Textarea}\r\n                                                       validate={[required]}\r\n            /></div>\r\n\r\n            <div><b>About me: </b><Field type={'text'}\r\n                                         name={'aboutMe'}\r\n                                         placeholder={'About me'}\r\n                                         component={Textarea}\r\n                                         validate={[required]}\r\n            /></div>\r\n\r\n            {/*<div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {*/}\r\n            {/*    const contactValue = profile.contacts[key as keyof typeof profile.contacts]; // Утверждение типа*/}\r\n            {/*    return <Contact key={key} contactTitle={key} contactValue={contactValue}/>;*/}\r\n            {/*})} </div>*/}\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileDataFormType>({form: 'editProfile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\n\r\ntype ProfileStatusType = {\r\n    status: string;\r\n    updateUserStatus: (status: string) => void// пофиксить\r\n};\r\n\r\nexport const ProfileStatus = ({ status, updateUserStatus }: ProfileStatusType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [currentStatus, setCurrentStatus] = useState(status);\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    useEffect(() => {\r\n        setCurrentStatus(status);\r\n    }, [status]);\r\n\r\n    useEffect(() => {\r\n        if (editMode && inputRef.current) {\r\n            inputRef.current.focus();\r\n        }\r\n    }, [editMode]);\r\n\r\n    const handleClick = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        setEditMode(false);\r\n        updateUserStatus(currentStatus);\r\n    };\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentStatus(e.target.value);\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {editMode ? (\r\n                <div>\r\n                    <input\r\n                        ref={inputRef}\r\n                        value={currentStatus}\r\n                        onBlur={handleBlur}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    {currentStatus ? (\r\n                        <span onClick={handleClick}>{currentStatus}</span>\r\n                    ) : (\r\n                        <span onClick={handleClick}><b>Status:</b> Нет статуса</span>\r\n                    )}\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './profileInfo.module.css'\r\nimport {Preloader} from 'src/componets/common/Preloader';\r\nimport {RootInterface} from 'src/redax/profileReducer';\r\nimport baseUserPhoto from 'src/assets/images/avatardefault_92824.svg'\r\nimport ProfileDataFormReduxForm from 'src/componets/profile/profileInfo/ProfileDataForm';\r\nimport {ProfileStatus} from 'src/componets/profile/profileInfo/ProfileStatus';\r\n\r\n\r\ntype ProfileInfoType = {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    updateUserStatus: (status: string) => any // пофиксить\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, isOwner, savePhoto, updateUserStatus}: ProfileInfoType) => {\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length > 0) {\r\n            savePhoto(e.target.files[0]);\r\n        } else {\r\n            console.error('No file selected');\r\n        }\r\n    }\r\n\r\n    const goToEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const onSubmut = (formData: any) => {\r\n        console.log(formData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={profile.photos.large ? profile.photos.large : baseUserPhoto} alt=\"big photo\"\r\n                     className={s.mainPhoto}/>\r\n                {isOwner ? '' : <input type={'file'} onChange={mainPhotoSelected}/>}\r\n\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm  onSubmit={onSubmut}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={goToEditMode}/>}\r\n\r\n\r\n                <ProfileStatus status={status} updateUserStatus={updateUserStatus}/>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\ntype ProfileDataType = {\r\n    profile: RootInterface | null;\r\n    isOwner?: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {!isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div><b>Full name: </b>{profile.fullName}</div>\r\n\r\n            <div><b>Looking for a job:</b> {profile.lookingForAJob ? 'Yes' : 'No'}</div>\r\n\r\n            <div><b>My professional skills: </b>{profile.lookingForAJob}</div>\r\n\r\n            <div><b>About me: </b>{profile.aboutMe}</div>\r\n\r\n            <div><b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                const contactValue = profile.contacts[key as keyof typeof profile.contacts]; // Утверждение типа\r\n                return <Contact key={key} contactTitle={key} contactValue={contactValue}/>;\r\n            })} </div>\r\n        </>\r\n    )\r\n}\r\n\r\ntype ContactProps = {\r\n    contactTitle: string;\r\n    contactValue: string | undefined; // или string | null, в зависимости от ваших требований\r\n};\r\n\r\nconst Contact: React.FC<ContactProps> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>{contactTitle}</b>: {contactValue}\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {MyPostContainer} from 'src/componets/profile/mypost/MyPostContainer';\r\nimport {RootInterface} from 'src/redax/profileReducer';\r\nimport {ProfileInfo} from 'src/componets/profile/profileInfo/ProfileInfo';\r\n\r\ntype ProfileType = {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    updateUserStatus: (status: string) => any // пофиксить\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nexport const Profile: React.FC<ProfileType> = ({profile, status, savePhoto, isOwner, updateUserStatus}) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateUserStatus={updateUserStatus}\r\n                         isOwner={isOwner}\r\n                         savePhoto={savePhoto}\r\n            />\r\n            <MyPostContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\n","import * as React from 'react';\r\nimport {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {RouteComponentProps, useParams} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\nimport {WithAuthRedirect} from 'src/hoc/withAuthRedirect';\r\nimport {getUserProfile, getUserStatus, RootInterface, savePhoto, updateUserStatus} from 'src/redax/profileReducer';\r\nimport {Profile} from 'src/componets/profile/Profile';\r\nimport {RootState} from 'src/redax/redax-store';\r\n\r\ntype RouteParams = {\r\n    userId: string;\r\n}\r\n\r\ntype Props = RouteComponentProps<RouteParams> & {\r\n    profile: RootInterface | null;\r\n    status: string\r\n    isAuth: boolean\r\n    autorizedUserId: string | null\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n};\r\n\r\nconst ProfileContainer: React.FC<Props> = (props) => {\r\n\r\n    const {getUserProfile, getUserStatus, updateUserStatus, savePhoto, profile, status, isAuth, autorizedUserId} = props;\r\n    const {userId} = useParams<RouteParams>()\r\n\r\n    useEffect(() => {\r\n        const fetchProfile = async () => {\r\n            try {\r\n                if (!userId) {\r\n                    if (autorizedUserId) {\r\n                        getUserProfile(autorizedUserId);\r\n                    } else {\r\n                        throw new Error('ID авторизованного пользователя отсутствует');\r\n                    }\r\n                    return;\r\n                }\r\n                getUserProfile(userId)\r\n                getUserStatus(userId)\r\n            } catch (error) {\r\n                // console.error(error.message); // Логируем ошибку\r\n            }\r\n        };\r\n        fetchProfile();\r\n    }, [userId, getUserProfile, getUserStatus]);\r\n\r\n    return (\r\n        <Profile profile={profile}\r\n                 status={status}\r\n                 updateUserStatus={updateUserStatus}\r\n                 isOwner={!!userId}\r\n                 savePhoto={savePhoto}\r\n        />\r\n    );\r\n};\r\n\r\ntype MapStatePropsType = {\r\n    profile: RootInterface | null,\r\n    status: string\r\n    autorizedUserId: string | null\r\n    isAuth: boolean\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => ({\r\n    profile: state.profilePage?.profile,\r\n    status: state.profilePage?.status,\r\n    autorizedUserId: state.auth?.userId,\r\n    isAuth: state.auth?.isAuth,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus, savePhoto}),\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n","import * as React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from 'src/redax/redax-store';\r\n\r\ntype MapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootState): MapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth?.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsTypeForRedirect> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) {\r\n            return <Redirect to=\"/login\"/>;\r\n        }\r\n        return <Component {...restProps as T} />;\r\n    };\r\n    // Оборачиваем RedirectComponent в connect\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n"],"names":["Post","_ref","id","message","count","_jsxs","className","S","children","_jsx","src","baseUserPhoto","alt","maxLength10","maxLengthCreator","MyPosts","posts","addPost","postsElements","map","p","s","AddMessagePostRedux","onSubmit","value","newPostText","reduxForm","form","props","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","React","MyPostContainer","connect","state","_state$profilePage","profilePage","dispatch","addPostAC","type","Input","ProfileStatus","status","updateUserStatus","editMode","setEditMode","useState","currentStatus","setCurrentStatus","inputRef","useRef","useEffect","current","focus","handleClick","_Fragment","ref","onBlur","handleBlur","onChange","e","target","onClick","ProfileInfo","profile","isOwner","savePhoto","Preloader","photos","large","files","length","console","error","ProfileDataFormReduxForm","formData","log","ProfileData","goToEditMode","_ref2","fullName","lookingForAJob","aboutMe","Object","keys","contacts","key","contactValue","Contact","contactTitle","_ref3","Profile","compose","_state$profilePage2","_state$auth","_state$auth2","autorizedUserId","auth","userId","isAuth","getUserProfile","getUserStatus","WithAuthRedirect","useParams","async","Error","fetchProfile","mapStateToPropsForRedirect","Component","restProps","Redirect","to"],"sourceRoot":""}