{"version":3,"file":"static/js/399.dab7c26f.chunk.js","mappings":"6JACA,QAA0B,yBAA1B,EAAiE,6BAAjE,EAAuG,wBAAvG,EAA0I,0BAA1I,EAA8K,yB,aCOvK,MAAMA,EAAUC,IAAiC,IAAhC,GAACC,EAAE,QAAEC,GAAqBF,EAC9C,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAUC,SAAEJ,GAAc,E,wBCC3C,MAAMK,EAASP,IAA6B,IAA5B,GAACC,EAAE,KAAEO,GAAiBR,EACzC,OACIG,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAASC,UACrBG,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,GAAI,YAAcV,EAAGK,SAAA,EAC1BH,EAAAA,EAAAA,KAAA,OAAKS,IAAKC,EAAKC,IAAI,yCAClBN,MAEH,E,0CCHd,MAAMO,GAAeC,EAAAA,EAAAA,GAAiB,KAyDhCC,GAAsBC,EAAAA,EAAAA,GAAgC,CACxDC,KAAM,wBADkBD,EAjB+CE,IAEnEX,EAAAA,EAAAA,MAAA,QAAMY,SAAUD,EAAME,aAAahB,SAAA,EAC/BH,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAACoB,EAAAA,EAAK,CAACC,UAAWC,EAAAA,EACXjB,KAAM,kBACNkB,YAAa,qBACbC,SAAU,CAACC,EAAAA,EAAUb,QAGhCZ,EAAAA,EAAAA,KAAA,OAAAG,UACIH,EAAAA,EAAAA,KAAA,UAAAG,SAAS,gB,cC9BzB,MAAMuB,GAAwBC,E,OAAAA,IDnBP9B,IAAsD,IAArD,YAAC+B,EAAW,YAAEC,EAAW,OAAEC,GAAoBjC,EAInE,MAAMkC,EAAkBH,EAAYI,QAAQC,KAAIC,IAAKlC,EAAAA,EAAAA,KAACI,EAAM,CACON,GAAIoC,EAAEpC,GACNO,KAAM6B,EAAE7B,KACR8B,IAAKD,EAAEC,KAHRD,EAAEpC,MAK9DsC,EAAmBR,EAAYS,SAASJ,KAAIK,IAAKtC,EAAAA,EAAAA,KAACJ,EAAO,CACOE,GAAIwC,EAAExC,GACNC,QAASuC,EAAEvC,SAFZuC,EAAExC,MAUvE,OACIQ,EAAAA,EAAAA,MAAA,OAAKL,UAAWC,EAAUC,SAAA,EACtBH,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAcC,SACzB4B,KAEL/B,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAWC,UACvBH,EAAAA,EAAAA,KAAA,OAAAG,SAAMiC,OAGVpC,EAAAA,EAAAA,KAACc,EAAmB,CAACI,SAdRqB,IACjBV,EAAYU,EAAOC,gBAAgB,MAc7B,ICNd,GAF0BC,EAAAA,EAAAA,KA1BHC,IACZ,CACHd,YAAac,EAAMd,gBASDe,IACf,CACHd,YAAcW,IACVG,GAASC,EAAAA,EAAAA,GAAcJ,GAAiB,KAY1BC,CAA6Cf,E,0EC7BvE,IAAImB,EAA8BH,IAAgB,IAAAI,EAAA,MAAoC,CAClFhB,OAAkB,QAAZgB,EAAEJ,EAAMK,YAAI,IAAAD,OAAA,EAAVA,EAAYhB,OACvB,EAEM,SAASH,EAAoBqB,GAWhC,OAAOP,EAAAA,EAAAA,IAAQI,EAARJ,EAT4DxB,IAC/D,IAAI,OAACa,KAAWmB,GAAahC,EAC7B,OAAKa,GAIE9B,EAAAA,EAAAA,KAACgD,EAAS,IAAKC,KAHXjD,EAAAA,EAAAA,KAACkD,EAAAA,GAAQ,CAAC1C,GAAG,UAGgB,GAIhD,C","sources":["webpack://samurai-way/./src/componets/dialogs/dialogs.module.css?5519","componets/dialogs/message/Message.tsx","componets/dialogs/dialog/Dialog.tsx","componets/dialogs/Dialogs.tsx","componets/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__6PR7R\",\"dialogItems\":\"dialogs_dialogItems__DVl83\",\"dialog\":\"dialogs_dialog__8HwMC\",\"messages\":\"dialogs_messages__8akUp\",\"message\":\"dialogs_message__N22fC\"};","import React from 'react';\r\nimport s from './../dialogs.module.css';\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nexport const Message = ({id, message}: MessageType) => {\r\n    return (\r\n        <div className={s.message}>{message}</div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from './../dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport dog from '../../../assets/images/dog.jpg';\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nexport const Dialog = ({id, name}: DialogType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={'/dialogs/' + id}>\r\n                <img src={dog} alt=\"аватар\"/>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './dialogs.module.css';\r\nimport {Message} from './message/Message';\r\nimport {Dialog} from './dialog/Dialog';\r\nimport {DialogReducerType} from '../../redax/dialogReducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../../componets/common/formsControls/FormsControl';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype DialogsType = {\r\n    dialogsPage: DialogReducerType\r\n    sendMessage: (newMessageValue: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nexport const Dialogs = ({dialogsPage, sendMessage, isAuth}: DialogsType) => {\r\n\r\n  \r\n\r\n    const dialogsElements = dialogsPage.dialogs.map(d => <Dialog key={d.id}\r\n                                                                       id={d.id}\r\n                                                                       name={d.name}\r\n                                                                       img={d.img}/>)\r\n\r\n    const messagesElements = dialogsPage.messages.map(m => <Message key={m.id}\r\n                                                                          id={m.id}\r\n                                                                          message={m.message}/>)\r\n\r\n\r\n    let addNewMessage = (values: AddMessageFormValues) => {\r\n        sendMessage(values.newMessageValue)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport type AddMessageFormValues = {\r\n    newMessageValue: string;\r\n};\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormValues>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageValue'}\r\n                       placeholder={'Enter your message'}\r\n                       validate={[required, maxLength100]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button >Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormValues>({\r\n    form: 'dialogAddMessageForm',\r\n}) (AddMessageForm)\r\n\r\n","import {connect} from 'react-redux';\r\nimport {Dialogs} from './Dialogs';\r\nimport {DialogReducerType, sendMessageAC} from '../../redax/dialogReducer';\r\nimport {RootState} from '../../redax/redax-store';\r\nimport {Dispatch} from 'redux';\r\nimport {WithAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage: DialogReducerType,\r\n    // isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: RootState): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        // isAuth: state.auth?.isAuth\r\n    }\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMessageValue: string) => void\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessageValue: string) => {\r\n            dispatch(sendMessageAC(newMessageValue))\r\n        }\r\n    }\r\n}\r\n\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, mapDispatchToProps),\r\n//     WithAuthRedirect\r\n// )(Dialogs)\r\n\r\nconst AuthRedirectComponent = WithAuthRedirect(Dialogs)\r\n\r\nconst  DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\r\n\r\nexport default DialogsContainer;\r\n","import * as React from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {RootState} from '../../src/redax/redax-store';\r\n\r\ntype MapStatePropsTypeForRedirect = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: RootState): MapStatePropsTypeForRedirect => ({\r\n    isAuth: state.auth?.isAuth\r\n})\r\n\r\nexport function WithAuthRedirect<T>(Component: React.ComponentType<T>) {\r\n\r\n    const RedirectComponent: React.FC<MapStatePropsTypeForRedirect> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth) {\r\n            return <Redirect to=\"/login\"/>;\r\n        }\r\n        // Если аутентифицирован, возвращаем переданный компонент\r\n        return <Component {...restProps as T} />;\r\n    };\r\n    // Оборачиваем RedirectComponent в connect\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n"],"names":["Message","_ref","id","message","_jsx","className","s","children","Dialog","name","_jsxs","NavLink","to","src","dog","alt","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","AuthRedirectComponent","WithAuthRedirect","dialogsPage","sendMessage","isAuth","dialogsElements","dialogs","map","d","img","messagesElements","messages","m","values","newMessageValue","connect","state","dispatch","sendMessageAC","mapStateToPropsForRedirect","_state$auth","auth","Component","restProps","Redirect"],"sourceRoot":""}